import torch

x_data = [1.0,2.0,3.0]
y_data = [2.0,4.0,6.0]

w=[0,0,0];

def forward(x):
    return w[0]*x*x+w[1]*x+w[2];

def loss(x,y):
    y_hat=forward(x);
    return (y_hat-y)**2;

for i in range(3):
    w[i]=torch.tensor(1.0);
    w[i].requires_grad = True


filename=input("Please:input filename : ");
filem=open(filename,"w");

print("predict (before training)", 4, forward(4).item());

for epoch in range(100):
    for x, y in zip(x_data,y_data):
        l = loss(x,y)
        l.backward()
        for i in range(3):
            print("\tgrad:", i, x, y, w[i].grad.item());
            w[i].data = w[i].data - 0.02*w[i].grad.data;
            w[i].grad.data.zero_()
    print("progress",epoch,l.item(),file=filem);

print("predict (after training)",4,forward(4).item(),file=filem);